#!/bin/bash
# kernel/update <new sublevel>

if [ ! "$1" ]; then
	echo "kernel/update <new sublevel>"
	exit 1
fi

# determine old version
cd `dirname $0`/linux
TEMPFILE=`tempfile`
head -n3 Makefile | sed -e 's/ //g' > $TEMPFILE
source $TEMPFILE
rm $TEMPFILE

# download patches
cd ../patches
for i in `seq "$SUBLEVEL" "$(($1 - 1))"`; do
	j="$((i + 1))"
	FILE="patch-$VERSION.$PATCHLEVEL.$i-$j.xz"
	if [ ! -f "$FILE" ]; then
		wget "https://www.kernel.org/pub/linux/kernel/v$VERSION.x/incr/$FILE"
	fi
done

# save config
cd ../linux
mv -v .config ../.config

# clean source
make distclean

# update source and git repository
for i in `seq "$SUBLEVEL" "$(($1 - 1))"`; do
	j="$((i + 1))"
	FILE="../patches/patch-$VERSION.$PATCHLEVEL.$i-$j.xz"
	if [ -f "$FILE" ]; then
		TIMESTAMP=`stat -c%Y $FILE`
		TIMEZONE=`stat -c%y $FILE | cut -d ' ' -f 3`
		export GIT_AUTHOR_DATE="$TIMESTAMP $TIMEZONE"
		export GIT_COMMITTER_DATE="$GIT_AUTHOR_DATE"
		git checkout linux
		xzcat "$FILE" | patch -p1
		git add .
		git commit -m "Update to Linux $VERSION.$PATCHLEVEL.$j"
		git tag "$VERSION.$PATCHLEVEL.$j"
		export GIT_AUTHOR_DATE="$(($TIMESTAMP + 1)) $TIMEZONE"
		export GIT_COMMITTER_DATE="$GIT_AUTHOR_DATE"
		export GIT_MERGE_AUTOEDIT='no'
		git checkout master
		git merge linux
		git tag "$VERSION.$PATCHLEVEL.$j-rpi"
	fi
done

# restore config
mv -v ../.config .config
